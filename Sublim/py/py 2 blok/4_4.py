# -*- coding: UTF-8 -*-
import math
import pylab
import random
from matplotlib import mlab
L=10 # Длительность сигнала соответствующего 0 или 1
s0=[]# Сигнал соответствующий 0 
s1=[]# Сигнал соответствующий 1
h1=[]# Массив для отсчетов импульсной характеристики согласованного фильтра с s1
h0=[]# Массив для отсчетов импульсной характеристики согласованного фильтра с s0 
x=[] #  Массив для входной смеси полезного сигнала с помехой
y1=[]  #  Массив для выходного процесса на выходе согласованного фильтра с s1 
y0=[]#  Массив для выходного процесса на выходе согласованного фильтра с s0 
A=0.9 #Параметр сигнала
#Массив отсчетов сигнала s0 для передачи логического 0
for i in range(0,L):
  for n in range(0,10):
   s=(A*math.exp(i*0.3*(n^2)))/(L-1)
   s0.append(s)
#Массив отсчетов сигнала s1 для передачи логической 1
for i in range(0,L):
  for n in range(0,10):
   s=(A*math.exp(-i*0.3*(n^2)))/(L-1)
   s1.append(s)
#Импульсная характеристика фильтра согласованного с сигналом s1  
for i in range(0,L):
   h1.append(s1[L-1-i])
#Импульсная характеристика фильтра согласованного с сигналом s0    
for i in range(0,L):
   h0.append(s0[L-1-i])
#Отведение памяти под массивы входных и выходных отсчетов    
for i in range(0,L):
    x.append(0)
    y1.append(0)
    y0.append(0)
#Количество моделируемых ситуаций для  метода Монте-Карло
M=10000
col=0 #Переменная для подсчета числа ошибок 
for jeks in range(0,M):# Цикл по числу экспериментов - моделируемых ситуаций
   for i in range(0,L):# Формирование входного процесса
      x[i]=random.normalvariate(0,3)  #  Важно!!!     1 - дисперсия помехи
      # Передаем либо 0 - в  четных экспериментах, либо 1 в  нечетных экспериментах
      if jeks%2 ==1:
          x[i]=x[i]+ s1[i]
      else:
          x[i]=x[i]+ s0[i]
   for i in range(0,L):#Фильтрация в канале согласованным с s1
        y1[i]=0.0
        for k in range(0,L) :
           if (((i-k)>=0 ) ):
               y1[i]=y1[i]+x[i-k]*h1[k]
   for i in range(0,L):#Фильтрация в канале согласованным с s0
       y0[i]=0.0
       for k in range(0,L) :
            if (((i-k)>=0 ) ):
                y0[i]=y0[i]+x[i-k]*h0[k]
   #Принятие вывода - что передавалось?            
   if y0[L-1]>y1[L-1]:
         ind =0   # Считаем, что передавался 0  
   else:
         ind =1
    # Увеличиваем счетчик ошибок       
   if (jeks%2 ==1) and (ind == 0):
      col+=1
   if (jeks%2 ==0) and (ind == 1):
      col+=1 
print 'Col' 
print '>>>%5.3f'%(col)
p = (col*100)
print 'Probability of error in percent'
print '>>>%5.3f' % (p/M)